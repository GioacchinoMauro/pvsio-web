{{&descriptor}}
{{#each importings}}
{{&.}}{{/each}}
{{#if states}}
/* enumeration of state labels */
typedef enum {
    {{#each states~}}{{name}}{{#unless @last}},{{/unless}}{{/each}}
} MachineState;{{/if}}

{{~#if constants}}
/* constants variables */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
extern const {{type}} {{name}};{{/each}}
{{~/if}}
 
/* Structure containing labelled states and local variables*/
typedef struct{ {{#each structureVar}}
    {{&.}}{{/each}}
{{~#if input_variables}}
    //input variables
{{~#each input_variables}}
    {{type}} {{name}};{{/each}}{{~/if}}{{~#if output_variables}}
    //output variables
{{~#each output_variables}}
    {{type}} {{name}};{{/each}}{{~/if}}
} state;

{{#if transitions}}/* auxiliary functions */
void enter(MachineState newStateLabel, state *st);
void leave(MachineState currentStateLabel, state *st);{{/if}}

{{#if initial_transitions}}/* initialiser */
state init(state *st);{{/if}}

{{#if transitions}}/* transition functions */
{{#each transitions}}{{#if id}}state {{id}}(state *st);{{else}}state {{0.id}}(state *st);{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
