{{&descriptor}}
{{#each importings}}
{{&.}}{{/each}}
{{#if states}}
/* enumeration of state labels */
typedef enum {
    {{#each states~}}{{name}}{{#unless @last}},{{/unless}}{{/each}}
}state;{{/if}}

{{~#if constants}}
/* constants variables */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
extern const {{type}} {{name}};{{/each}}
{{~/if}}
 
/* Structure containing labelled states and local variables*/
typedef struct{
{{#each structureVar}} 		{{&.}}
{{/each}}
{{~#if input_variables}}        //input variables   //TO REWIEV
{{~#each input_variables}}
        {{type}} {{name}};{{/each}}
{{~/if}} 
{{~#if output_variables}}
        //output variables
{{~#each output_variables}}
        {{type}} {{name}};{{/each}}
{{~/if}}
}struct_state;
 
{{#if transitions}}
/* helper functions */
void enter(state newStateLabel, struct_state *st);

void leave(state currentStateLabel, struct_state *st);{{/if}}
{{#if initial_transitions}}
/* initialiser */
{{#each initial_transitions}}struct_state init{{&init_suffix_for_header}}(struct_state *st);
{{/each}}{{/if}}
{{#if transitions}}
/* functions for model */
{{#each transitions}}{{#if id}}void {{id}}(struct_state *st, void* InOutVAriables);
{{else}}
void {{0.id}}(struct_state *st, void* InOutVAriables);
{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
