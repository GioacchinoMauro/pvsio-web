{{&descriptor}}
 /** Asserts:
  *      'st->valid' is TRUE.
  *      The structure is initialized
  */
#include "{{filename}}.h"
#include <assert.h>

{{~#if constants}}
/* constants variables */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
static const {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{#if states}}
/* declaration of state labels */
{{#each states~}}state {{id}} = {{&name}};
{{/each}}{{/if}}
{{#if transitions}}
/* declaration of helper functions */
void enter(state newStateLabel, struct_state *st) {
    assert( st->valid );
    st->current_state = newStateLabel;
}

void leave(state currentStateLabel, struct_state *st) {
    assert( st->valid );
    st->previous_state = currentStateLabel;
}{{/if}}
{{#if initial_transitions}}
/* initialisation function for model */
{{#each initial_transitions}}struct_state init{{&init_suffix}}(){
    struct_state p;{{!-- {{useful to use te arrow notation event inside init functions}} --}}
    struct_state *st = &p;
    st->valid = true;
    enter({{target.id}}, st);
    {{#each ../local_variables}}{{#if value}}st->{{name}} = {{&value}};{{/if}}
    {{/each}}
    {{~#each actions}}
    {{&.}};{{/each}}
    return *st;
}
{{/each}}{{/if}}
{{#if transitions}}
/* function declarations */
{{#each transitions}}{{#if id}}void {{id}}(struct_state *st, void* InOutVAriables) {
    assert( st->valid ); 
{{~#if condition}}
    if ({{&condition}}) {
        leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        enter({{target.id}}, st);
    }
{{~else}}
    leave({{source.id}}, st);
    {{~#each actions}}
    {{&.}};{{~/each}}
    enter({{target.id}}, st);
{{~/if}}
}
{{else}}struct_state {{0.id}}(struct_state st, void* InOutVAriables) {
    assert( st->valid );
{{#each .}}
{{~#if condition}}
    if ({{&condition}} && st->current_state == {{source.id}}) {
        leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        enter({{target.id}}, st);
    }{{~else}}
    if (current_state == {{source.id}}) {
        leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{~/each}}
        enter({{target.id}}, st);
{{~/if}}{{/each}}
}
{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
