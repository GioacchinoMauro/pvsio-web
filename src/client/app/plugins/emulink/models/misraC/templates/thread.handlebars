{{&descriptor}}
#include "{{filename}}.h"

{{~#if constants}}
/* constants variables */
{{~#each constants}}
static const {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}

{{~#if local_variables}}
/* local variables */
{{~#each local_variables}}
static {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{#if states}}
/* declare state labels as variables */ //UNCLEAR: wich type are states?
{{#each states~}}UC_8 *{{&name}} = "{{name}}";
{{/each}}{{/if}}
{{#if transitions}}
/* declaration of helper functions */
struct_state enter(UC_8* newStateLabel, struct_state st) {
    st.current_state = newStateLabel;
    return st;
}

struct_state leave(UC_8* currentStateLabel, struct_state st) {
    st.previous_state = currentStateLabel;
    return st;
}{{/if}}
{{#if initial_transitions}}
/* initialisation function for model */
{{#each initial_transitions}}struct_state init{{&init_suffix}}(){
    struct_state st = enter("{{target.name}}", st);
    {{~#each actions}}
    st.{{&.}};{{/each}}
    return st;
}{{/each}}{{/if}}
{{#if transitions}}
/* function declarations */
{{#each transitions}}{{#if id}}struct_state {{id}}(struct_state st) {
{{~#if condition}}
    if ({{&condition}}) {
        st = leave("{{source.name}}", st);
        {{~#each actions}}
        st.{{&.}};{{/each}}
        st = enter("{{target.name}}", st);
    }
{{~else}}
    st = leave("{{source.name}}", st);
    {{~#each actions}}
    st.{{&.}};{{~/each}}
    st = enter("{{target.name}}", st);
{{~/if}}
    return st;
}
{{else}}struct_state {{0.id}}(struct_state st) {
{{#each .}}
{{~#if condition}}
    if ({{&condition}} && current_state == "{{source.name}}") {
        st = leave("{{source.name}}", st);
        {{~#each actions}}
        st.{{&.}};{{/each}}
        st = enter("{{target.name}}", st);
    }{{~else}}
    if (current_state == "{{source.name}}") {
        st = leave("{{source.name}}", st);
        {{~#each actions}}
        st.{{&.}};{{~/each}}
        st = enter("{{target.name}}", st);
{{~/if}}{{/each}}
    return st;
}
{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
