{{&descriptor}}
{{#each importings}}
{{&.}}{{/each}}

{{~#if constants}}
// constants variables
{{~#each constants}}
static const {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{~#if input_variables}}
//input variables
{{~#each input_variables}}
extern {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{~#if output_variables}}
//output variables
{{~#each output_variables}}
extern {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{~#if local_variables}}
//local variables
{{~#each local_variables}}
static {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}

//declaration of helper functions
void* enter(newStateLabel, st) {
    st.current_state = newStateLabel;
    return state;
}

void* leave(currentStateLabel, st) {
    st.previous_state = currentStateLabel;
    return state;
}

//declare state labels as variables //UNCLEAR: wich type are states?
{{#each states~}}
void *{{&name}} = "{{name}}";
{{/each}}

//initialisation function for model
{{#each initial_transitions}}
void* init{{init_name}}(){
    void* st = enter("{{target.name}}", st);
    {{~#each actions}}
    st.{{&.}};{{/each}}
    return st;
}{{/each}}

//function declarations
{{#each transitions}}
void* {{id}} (st) {
{{~#if condition}}
    if ({{&condition}}) {
        st = leave("{{source.name}}", st);
        {{~#each actions}}
        st.{{&.}};{{/each}}
        st = enter("{{target.name}}", st);
    }
{{~else}}
    st = leave("{{source.name}}", st);
    {{~#each actions}}
    st.{{&.}};{{~/each}}
    st = enter("{{target.name}}", st);
{{~/if}}
    return st;
}
{{/each}}
{{&disclaimer}}
