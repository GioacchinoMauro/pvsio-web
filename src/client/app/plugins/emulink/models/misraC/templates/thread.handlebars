{{&descriptor}}

//variable declarations //UNCLEAR
{{~#if input_variables}}
//input variables
{{~#each input_variables}}
{{type}} {{name}}{{#if value}} = {{&value}}{{/if}};
{{/each}}
{{~/if}}
{{~#if output_variables}}
//output variables
{{~#each output_variables}}
{{type}} {{name}}{{#if value}} = {{&value}}{{/if}};
{{/each}}
{{~/if}}
{{~#if local_variables}}
//local variables
{{~#each local_variables}}
{{type}} {{name}}{{#if value}} = {{&value}}{{/if}};
{{/each}}
{{~/if}}

//declaration of helper functions
void* enter(newStateLabel, st) {
    st.current_state = newStateLabel;
    return state;
}

void* leave(currentStateLabel, st) {
    st.previous_state = currentStateLabel;
    return state;
}

//declare state labels as variables //UNCLEAR
{{!-- {{#if initial_transitions}} ---->Serve??
start: initial state{{/if}} --}}
{{#each states~}}
unsigned char *{{&name}} = "{{name}}";
{{/each}}

//initialisation function for model //UNFINISHED
{{#each initial_transitions}}

void* init_{{&id}}(){
    void* st  = enter('{{target.name}}', st);
    return st;
}
{{/each}}

//function declarations
{{#each transitions}}
void* {{id}} (st) {
{{~#if condition}}
    if ({{&condition}}) {
        st = leave('{{source.name}}', st);
        {{~#each actions}}
        st.{{&.}};
        {{/each}}
        st  = enter('{{target.name}}', st);
    }
{{~else}}
    st = leave('{{source.name}}', st);
    {{~#each actions}}
    st.{{&.}};
    {{~/each}}
    st = enter('{{target.name}}', st);
{{~/if}}
    return st;
}
{{/each}}

---useless---

thread implementation {{&modelName}}.impl
  annex BLESS
  {**
  invariant <<true>>
  variables
    {{#each local_variables~}}
    {{&name}} : {{&type}};
    {{/each}}
  states{{#if initial_transitions}}
    start: initial state{{/if}}
    {{#each states~}}
    {{&name}} : state;
    {{/each}}
  transitions{{#each initial_transitions}}
    {{#if parserError}}
    --- {{&erroneousLabel}}
    --- {{&parserError}}{{else}}
    {{&id}}:
      start-[ {{&condition}} ]->{{&target.name}}
          { {{~#each actions}}
            {{&.}}{{#unless @last}}
          ;{{/unless}}{{/each}}
           };  --end of start
    {{/if}}{{/each}}{{#each transitions}}
    {{#if parserError}}
    --- {{&erroneousLabel}}
    --- {{&parserError}}{{else}}
    {{&id}}:
      {{&source.name}}-[ {{&condition}} ]->{{&target.name}}
          { {{~#each actions}}
            {{&.}}{{#unless @last}}
          ;{{/unless}}{{/each}}
           };  --end of {{&id}}{{/if}}
    {{/each}}
  **};
end {{&modelName}}.impl;
{{&disclaimer}}