{{&descriptor}}
/** Asserts:
 *      st->previous_state != NaN
 *          System is initialised
 *      st->current_state == [state]
 *          Function are called from the right state
 */
#include "{{filename}}.h"
#include <assert.h>

{{~#if constants}}
/* constants variables */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
const {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{#if transitions}}
/* definition of auxiliary functions */
void enter(MachineState newStateLabel, state *st) {
    st->current_state = newStateLabel;
}
void leave(MachineState currentStateLabel, state *st) {
    st->previous_state = currentStateLabel;
}{{/if}}

{{#if initial_transitions}}/* definition of initialisation function */
state init(state *st){
    leave(off, st);     //leave call is issued in order to initilise previous state
    {{#each ../local_variables}}{{#if value}}st->{{name}} = {{&value}};
    {{/if}}{{/each}}
    {{~#each ../input_variables}}{{#if value}}st->{{name}} = {{&value}};
    {{/if}}{{/each}}
    {{~#each ../output_variables}}{{#if value}}st->{{name}} = {{&value}};
    {{/if}}{{/each}}
    {{~#each initial_transitions}}
    {{~#if condition}}if ({{&condition}}) {
        enter({{target.name}}, st);
        {{#each actions}}{{&.}};
        {{/each}}assert ( st->current_state == {{target.name}} );
        return *st;
    }
    {{else}}enter({{target.name}}, st);
    {{#each actions}}{{&.}};
    {{/each}}assert ( st->current_state == {{target.name}} );
    return *st;{{/if}}{{/each}}
}{{/if}}

{{#if transitions}}/* definition of transition functions */
{{#each transitions}}{{#if id}}state {{id}}(state *st) {
    assert( st->previous_state != NaN && st->current_state == {{source.name}});
{{~#if condition}}
    if ({{&condition}}) {
        leave({{source.name}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        enter({{target.name}}, st);
    }
{{~else}}
    leave({{source.name}}, st);
    {{~#each actions}}
    {{&.}};{{~/each}}
    enter({{target.name}}, st);
{{~/if}}
    assert( st->current_state == {{target.name}} );
    return *st;
}
{{else}}state {{0.id}}(state *st) {
    assert( st->previous_state != NaN && ({{~#each .}}st->current_state ==  {{source.name}} {{#unless @last}}|| {{/unless}}{{/each}}));
{{#each .}}
{{~#if condition}}
    if ({{&condition}} && st->current_state == {{source.name}}) {
        leave({{source.name}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        enter({{target.name}}, st);
        assert( st->current_state == {{target.name}} );
        return *st;
    }{{~else}}
    if (current_state == {{source.name}}) {
        leave({{source.name}}, st);
        {{~#each actions}}
        {{&.}};{{~/each}}
        enter({{target.name}}, st);
        assert( st->previous_state != NaN && st->current_state == {{target.name}} );
        return *st;
{{~/if}}{{/each}}
    return *st;
}
{{/if}}
{{/each}}{{/if}}
{{#if transitions}}/* definition of permission function for transition functions */
{{#each transitions}}{{#if id}}UC_8 per_{{id}}(state *st) {
    if(st->current_state == {{source.name}}){
        return true;
    }
    return false;
}
{{else}}UC_8 per_{{0.id}}(state *st) {
{{#each .}}
    if (st->current_state == {{source.name}}){
        return true;
    }{{/each}}
    return false;
}
{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
