{{&descriptor}}
#include "{{filename}}.h"
#include <assert.h>
#include <stddef.h>

{{~#if constants}}
/* constants variables */
{{~#each constants}}{{!-- {{keyword static may be applied with respect to MISRA 1998 rule (Rule 23, advisory)}} --}}
static const {{type}} {{name}}{{#if value}} = {{&value}}{{/if}};{{/each}}
{{~/if}}
{{#if states}}
/* declaration of state labels */
{{#each states~}}state {{id}} = {{&name}};
{{/each}}{{/if}}
{{#if transitions}}
/* declaration of helper functions */
struct_state enter(state newStateLabel, struct_state st) {
    //assert( (st != NULL) && (newStateLabel != NULL) );
    st.current_state = newStateLabel;
    return st;
}

struct_state leave(state currentStateLabel, struct_state st) {
    //assert( (st != NULL) && (currentStateLabel != NULL) );
    st.previous_state = currentStateLabel;
    return st;
}{{/if}}
{{#if initial_transitions}}
/* initialisation function for model */
{{#each initial_transitions}}struct_state init{{&init_suffix}}(){
    struct_state st;
    st = enter({{target.id}}, st);
    {{#each ../local_variables}}{{#if value}}st.{{name}} = {{&value}};{{/if}}
    {{/each}}
    {{~#each actions}}
    {{&.}};{{/each}}
    return st;
}{{/each}}{{/if}}
{{#if transitions}}
/* function declarations */
{{#each transitions}}{{#if id}}struct_state {{id}}(struct_state st) {
    //assert(st.current_state != NULL); 
{{~#if condition}}
    if ({{&condition}}) {
        st = leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        st = enter({{target.id}}, st);
    }
{{~else}}
    st = leave({{source.id}}, st);
    {{~#each actions}}
    {{&.}};{{~/each}}
    st = enter({{target.id}}, st);
{{~/if}}
    return st;
}
{{else}}struct_state {{0.id}}(struct_state st) {
    //assert(st.current_state != NULL);
{{#each .}}
{{~#if condition}}
    if ({{&condition}} && st.current_state == {{source.id}}) {
        st = leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{/each}}
        st = enter({{target.id}}, st);
    }{{~else}}
    if (current_state == {{source.id}}) {
        st = leave({{source.id}}, st);
        {{~#each actions}}
        {{&.}};{{~/each}}
        st = enter({{target.id}}, st);
{{~/if}}{{/each}}
    return st;
}
{{/if}}
{{/each}}{{/if}}
{{&disclaimer}}
