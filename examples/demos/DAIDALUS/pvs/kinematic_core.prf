(kinematic_core
 (defparam_TCC1 0
  (defparam_TCC1-1 nil 3647955324
   ("" (lemma "trig@atan.pi_bnds")
    (("" (lemma "trig_fnd@atan.pi_bnds") (("" (ground) nil nil)) nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bnds formula-decl nil atan "trig_fnd/"))
   nil))
 (defparam_TCC2 0
  (defparam_TCC2-1 nil 3647955324
   ("" (lemma "trig_fnd@atan.pi_bnds") (("" (ground) nil nil)) nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bnds formula-decl nil atan "trig_fnd/"))
   nil))
 (defcore_TCC1 0
  (defcore_TCC1-1 nil 3647640597
   ("" (expand "deg") (("" (ground) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (deg const-decl "posreal" units "TCASII/"))
   nil))
 (defcore_TCC2 0
  (defcore_TCC2-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((gen_most_urg const-decl "int" los_and_cd nil)) nil))
 (defcore_TCC3 0
  (defcore_TCC3-1 nil 3647640597
   ("" (expand "deg") (("" (ground) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (deg const-decl "posreal" units "TCASII/"))
   nil))
 (delay?_TCC1 0
  (delay?_TCC1-1 nil 3647640597
   ("" (skeep)
    (("" (skeep)
      (("" (ground)
        (("" (typepred (traffic))
          (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (delay?_TCC2 0
  (delay?_TCC2-1 nil 3647640597
   ("" (skeep)
    (("" (skeep)
      (("" (typepred (traffic))
        (("" (expand "length")
          (("" (ground) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/"))
   nil))
 (delay?_TCC3 0
  (delay?_TCC3-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (string type-eq-decl nil strings nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (Aircraft type-eq-decl nil int_bands nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (listn type-eq-decl nil listn "structures/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (delay?_TCC4 0
  (delay?_TCC4-1 nil 3647640597 ("" (termination-tcc) nil nil) nil
   nil))
 (delay?_TCC5 0
  (delay?_TCC5-1 nil 3647640597
   ("" (skeep)
    (("" (typepred (traffic))
      (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((listn type-eq-decl nil listn "structures/")
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (list type-decl nil list_adt nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (update_delay_TCC1 0
  (update_delay_TCC1-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cd2bool const-decl "bool" los_and_cd nil)
    (delay? const-decl "bool" kinematic_core nil))
   nil))
 (update_add_traffic_TCC1 0
  (update_add_traffic_TCC1-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   nil nil))
 (update_add_traffic_TCC2 0
  (update_add_traffic_TCC2-1 nil 3647640597
   ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (update_omega_TCC1 0
  (update_omega_TCC1-1 nil 3647640597
   ("" (skolem-typepred)
    (("" (assert)
      (("" (flatten)
        (("" (expand "Tan?")
          (("" (flatten)
            (("" (lemma "cos_eq_0")
              (("" (inst?)
                (("" (typepred "core!1`bank_angle")
                  (("" (flatten)
                    (("" (hide -5)
                      (("" (hide -2)
                        (("" (assert)
                          (("" (skeep)
                            (("" (lemma "pi_bnds")
                              ((""
                                (ground)
                                ((""
                                  (replaces -5)
                                  ((""
                                    (hide (-5 -6 1))
                                    ((""
                                      (grind :exclude "pi")
                                      ((""
                                        (move-terms -4 r 1)
                                        ((""
                                          (simplify)
                                          ((""
                                            (case "i>=0")
                                            (("1"
                                              (mult-by -1 "pi")
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (move-terms -3 l 1)
                                              (("2"
                                                (cancel-by -3 "pi")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" sincos_def "trig_fnd/")
    (cos_eq_0 formula-decl nil trig_basic "trig_fnd/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pi_bnds formula-decl nil atan "trig_fnd/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pi_lb const-decl "posreal" atan_approx "trig_fnd/")
    (pi_ub const-decl "posreal" atan_approx "trig_fnd/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (neg_div formula-decl nil extra_tegies nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Core type-eq-decl nil kinematic_core nil)
    (MostUrgent type-eq-decl nil los_and_cd nil)
    (Sign type-eq-decl nil sign "reals/")
    (Traffic type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (gs const-decl "nnreal" definitions "ACCoRD/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (update_omega_TCC2 0
  (update_omega_TCC2-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (Traffic type-eq-decl nil int_bands nil)
    (Sign type-eq-decl nil sign "reals/")
    (MostUrgent type-eq-decl nil los_and_cd nil)
    (Core type-eq-decl nil kinematic_core nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_cont name-judgement "continuous_vr_fun" vect_cont_2D
     "vect_analysis/")
    (/= const-decl "boolean" notequal nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (sqv const-decl "nnreal" vectors_2D "vectors/")
    (norm const-decl "nnreal" vectors_2D "vectors/")
    (gs const-decl "nnreal" definitions "ACCoRD/")
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (update_omega_TCC3 0
  (update_omega_TCC3-1 nil 3647640597
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (case "gs(vect2(core!1`ownship`v))>0")
        (("1" (case "tan(core!1`bank_angle)>0")
          (("1" (ground)
            (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil))
            nil)
           ("2" (hide 3)
            (("2" (typepred "core!1`bank_angle")
              (("2" (lemma "tan_tan_value")
                (("2" (inst?)
                  (("2" (ground)
                    (("2" (replaces -1)
                      (("2" (rewrite "tan_value_def")
                        (("2" (expand "abs")
                          (("2" (lemma "tan_value_0")
                            (("2" (rewrite "tan_value_def")
                              (("2"
                                (expand "abs")
                                (("2"
                                  (lemma "sin_value_strict_increasing")
                                  (("2"
                                    (lemma
                                     "cos_value_strict_decreasing")
                                    (("2"
                                      (expand "strict_decreasing?")
                                      (("2"
                                        (inst
                                         -1
                                         "0"
                                         "core!1`bank_angle")
                                        (("2"
                                          (expand "strict_increasing?")
                                          (("2"
                                            (inst
                                             -
                                             "0"
                                             "core!1`bank_angle")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (replace -3 1 :dir rl)
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (lemma
                                                     "cos_value_pi2")
                                                    (("2"
                                                      (lemma
                                                       "cos_value_strict_decreasing")
                                                      (("2"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "core!1`bank_angle"
                                                           "pi/2")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (typepred "core!1`bank_angle")
            (("3" (lemma "cos_eq_0")
              (("3" (inst?)
                (("3" (flatten)
                  (("3" (expand "Tan?")
                    (("3" (hide 3)
                      (("3" (hide -2)
                        (("3" (ground)
                          (("3" (skeep)
                            (("3" (replaces -1)
                              (("3"
                                (hide (-6 -4 -5 1))
                                (("3"
                                  (case "i>=0")
                                  (("1"
                                    (mult-by -1 "pi")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("2"
                                      (move-terms -1 l 1)
                                      (("2"
                                        (simplify -1)
                                        (("2"
                                          (cancel-by -1 "pi")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "gs") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((tan const-decl "real" sincos_def "trig_fnd/")
    (Tan? const-decl "bool" sincos_def "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (sin_value_strict_increasing formula-decl nil sincos_quad
     "trig_fnd/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (div_mult_pos_neg_gt1 formula-decl nil extra_real_props nil)
    (sin_value const-decl "[real_abs_le_pi2 -> real_abs_le1]"
     sincos_quad "trig_fnd/")
    (cos_value const-decl "[nnreal_le_pi -> real_abs_le1]" sincos_quad
     "trig_fnd/")
    (real_abs_le1 nonempty-type-eq-decl nil asin "trig_fnd/")
    (cos_value_pi2 formula-decl nil sincos_quad "trig_fnd/")
    (real_abs_le_pi2 nonempty-type-eq-decl nil asin "trig_fnd/")
    (nnreal_le_pi nonempty-type-eq-decl nil acos "trig_fnd/")
    (<= const-decl "bool" reals nil)
    (cos_value_strict_decreasing formula-decl nil sincos_quad
     "trig_fnd/")
    (tan_value_0 formula-decl nil tan_quad "trig_fnd/")
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil atan "trig_fnd/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tan_value_def formula-decl nil tan_quad "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (tan_tan_value formula-decl nil sincos_def "trig_fnd/")
    (cos_eq_0 formula-decl nil trig_basic "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_ub const-decl "posreal" atan_approx "trig_fnd/")
    (pi_lb const-decl "posreal" atan_approx "trig_fnd/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Core type-eq-decl nil kinematic_core nil)
    (MostUrgent type-eq-decl nil los_and_cd nil)
    (Sign type-eq-decl nil sign "reals/")
    (Traffic type-eq-decl nil int_bands nil)
    (Aircraft type-eq-decl nil int_bands nil)
    (ConfDetector type-eq-decl nil los_and_cd nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (vect2 const-decl "Vect2" vect_3D_2D "vectors/")
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (gs const-decl "nnreal" definitions "ACCoRD/")
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (update_RA_thr_TCC1 0
  (update_RA_thr_TCC1-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (update_RA_thr_TCC2 0
  (update_RA_thr_TCC2-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (update_RA_thr_TCC3 0
  (update_RA_thr_TCC3-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ft const-decl "posreal" units "TCASII/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (update_RA_thr_TCC4 0
  (update_RA_thr_TCC4-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ft const-decl "posreal" units "TCASII/")
    (sensitivity_level const-decl "SensitivityLevel" TCAS_tables
     "TCASII/"))
   nil))
 (update_RA_thr_TCC5 0
  (update_RA_thr_TCC5-1 nil 3647640597
   ("" (skeep)
    (("" (skeep)
      (("" (skeep) (("" (skeep) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((ft const-decl "posreal" units "TCASII/")
    (RA_thr const-decl "nnreal" TCAS_tables "TCASII/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (update_RA_thr_TCC6 0
  (update_RA_thr_TCC6-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (RA_thr const-decl "nnreal" TCAS_tables "TCASII/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ft const-decl "posreal" units "TCASII/")
    (sensitivity_level const-decl "SensitivityLevel" TCAS_tables
     "TCASII/"))
   nil))
 (update_RA_thr_TCC7 0
  (update_RA_thr_TCC7-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ft const-decl "posreal" units "TCASII/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (update_RA_thr_TCC8 0
  (update_RA_thr_TCC8-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ft const-decl "posreal" units "TCASII/")
    (sensitivity_level const-decl "SensitivityLevel" TCAS_tables
     "TCASII/"))
   nil))
 (update_RA_thr_TCC9 0
  (update_RA_thr_TCC9-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((RA_thr const-decl "nnreal" TCAS_tables "TCASII/")
    (nmi const-decl "posreal" units "TCASII/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ft const-decl "posreal" units "TCASII/")
    (sensitivity_level const-decl "SensitivityLevel" TCAS_tables
     "TCASII/"))
   nil))
 (update_RA_thr_TCC10 0
  (update_RA_thr_TCC10-1 nil 3647640597 ("" (subtype-tcc) nil nil)
   ((RA_thr const-decl "nnreal" TCAS_tables "TCASII/")
    (nmi const-decl "posreal" units "TCASII/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (ft const-decl "posreal" units "TCASII/")
    (sensitivity_level const-decl "SensitivityLevel" TCAS_tables
     "TCASII/"))
   nil)))

