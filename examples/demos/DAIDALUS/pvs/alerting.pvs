alerting  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  IMPORTING get_kinematic_bands

  WCVTable : TYPE = [# DTHR: nnreal,
  	     	       ZTHR: nnreal,
		       TTHR: nnreal,
		       TCOA: nnreal #]

  AlertTable : TYPE = [# wcv: WCVTable, 
  	       	      	 duration: nnreal, 
			 lookahead: nnreal #] 

  WCV_from_table(wcvtable: WCVTable): ConfDetector = 
    wcv_taumod_cd(wcvtable`TTHR, wcvtable`TCOA, wcvtable`DTHR, wcvtable`ZTHR)

  alertor_from_conf(cd: ConfDetector, duration, lookahead: nnreal)(aco:Aircraft)(aci:Aircraft): bool = 
    LET ent_ex = cd(0,lookahead, aco, aci) IN
        ent_ex`2-ent_ex`1 >= duration 

  alertor_from_table(at: AlertTable)(aco:Aircraft)(aci:Aircraft): bool =
    LET wcv = WCV_from_table(at`wcv) IN
    alertor_from_conf(wcv, at`duration, at`lookahead)(aco)(aci)   

  alert_traffic(alertor:[Aircraft->[Aircraft->bool]])(aco:Aircraft)(traffic:Traffic): RECURSIVE bool = 
    IF traffic = null[Aircraft] THEN FALSE 
    ELSE alertor(aco)(car(traffic)) OR alert_traffic(alertor)(aco)(cdr(traffic))
    ENDIF
    MEASURE length(traffic)

  threshold_alert_funs(at_list: list[AlertTable]) : 
    list[[Aircraft->[Traffic->bool]]] = 
    reverse(map(LAMBDA (at: AlertTable): alert_traffic(alertor_from_table(at)), at_list))

  alerting_from_funs(alert_funs: list[[Aircraft->[Traffic->bool]]], (n:nat|length(alert_funs) = n))(aco:Aircraft)(traffic:Traffic): 
    RECURSIVE below(n+1) = 
    IF null?(alert_funs) THEN 0 
    ELSE LET af = car(alert_funs) IN 
         IF af(aco)(traffic) THEN n
	 ELSE alerting_from_funs(cdr(alert_funs), n-1)(aco)(traffic) 
	 ENDIF
    ENDIF
    MEASURE n

  threshold_alerting(at_list: list[AlertTable])(aco:Aircraft)(traffic:Traffic): 
   below(length(at_list)+1) = 
   LET af_list = threshold_alert_funs(at_list) IN
   alerting_from_funs(af_list, length(af_list))(aco)(traffic) 


  



  END alerting
