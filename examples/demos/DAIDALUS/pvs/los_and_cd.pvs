los_and_cd  % [ parameters ]
		: THEORY

  BEGIN
    %TCAS: LIBRARY = "../TCAS/"

   IMPORTING WellClear@WCV_taumod, int_bands, TCASII@units

  LoSDetector: TYPE = [[Aircraft, Aircraft]->bool]

  ConfDetector: TYPE = [[nnreal, nnreal, Aircraft, Aircraft]-> [real,real]]  
  
  MostUrgent: TYPE = {F:[[Vect3,Vect3,AircraftList]->int]| 
                    FORALL (so,vo:Vect3,(AL:AircraftList|length(AL)>0)): F(so,vo,AL)>=0 AND F(so,vo,AL)<length(AL)}

  % Instantiations of LoS and CD functions.
  % For the interface, these have types LoSDetector and cdDetector. 
  % For use in the algorithms, they have different signatures.
  % The first few functions here translate between the types.
  % In the algorithms, CD (boolean) must work with B>=T. In this case, CD should be false
  % when B>T, and when B=T, it should calculate LOS T seconds 
  % in the future. In particular, CD(0,0,...) should determine if aircraft are in LoS. 

  los2LOS(los:LoSDetector)(so,vo,si,vi:Vect3): 
    bool = 
    los((#s:=so, v:=vo, id:=""#), (#s:=si, v:=vi, id:=""#))

  cd2CD(cd:ConfDetector)(t0,t1:nnreal, so,vo,si,vi:Vect3): 
    bool = LET CDEntExit = cd(t0,t1,(#s:=so, v:=vo, id:=""#), (#s:=si, v:=vi, id:=""#)) IN
        CDEntExit`1<= CDEntExit`2

  cd2bool(cd:ConfDetector)(t0,t1:nnreal, own, intruder:Aircraft): bool = 
  	LET CDEntExit = cd(t0,t1,own, intruder) IN
        CDEntExit`1<= CDEntExit`2				      
    
  cd2los(cd:ConfDetector): 
    LoSDetector = LAMBDA( aco, aci:Aircraft): (cd(0,0,aco,aci)`1>=0) 

  cd2LOS(cd:ConfDetector): 
    [[Vect3,Vect3,Vect3,Vect3]->bool] = 
    los2LOS(cd2los(cd))

  
  No_los(aco, aci:Aircraft): bool = FALSE

  No_cd(B,T:nnreal, aco, aci:Aircraft): [real,real] = (-1, -2)
 
  gen_most_urg(so, vo:Vect3, AL:AircraftList): int =0 




  cylinder_los(D, H: posreal)(aco, aci:Aircraft): 
     bool = los?[D,H](aci`s-aco`s)

  cylinder_cd(D, H: posreal)(B, T: nnreal , aco, aci:Aircraft): 
    [real,real] = 
      IF B>=T THEN 
    	IF B>T THEN (-1, -2)
	ELSIF cylinder_los(D,H)(aco WITH [s:=aco`s+T*aco`v], aci WITH [s:= aci`s+T*aci`v]) THEN (T,T)
        ELSE (-1,-2)
    	ENDIF
      ELSE  IF cd3d?[D,H,B,T](aci`s-aco`s, aci`v-aco`v) THEN
      	       detection[D,H,B,T](aci`s-aco`s, aci`v-aco`v) 
	    ELSE (-1,-2)
	    ENDIF 
      ENDIF 


  wcv_taumod_los(TM, TC: nnreal, D,H:posreal)(aco, aci:Aircraft): 
     bool = WCV_taumod[TM,TC,D,H](aci`s-aco`s, aci`v-aco`v) 

  wcv_taumod_cd(TM, TC: nnreal, D,H:posreal)(B, T: nnreal, aco, aci:Aircraft):
     [real,real] = 
       IF B>=T THEN 
         IF B>T THEN (-1,-2)
	 ELSIF wcv_taumod_los(TM,TC,D,H)(aco WITH [s:=aco`s+T*aco`v], aci WITH [s:= aci`s+T*aci`v]) THEN (T,T)
	 ELSE (-1,-2)      
    	 ENDIF 
       ELSE LET entry_exit = WCV_taumod_interval[TM,TC,D,H](B, T, aci`s-aco`s, aci`v-aco`v) IN
       	  (entry_exit`entry, entry_exit`exit)
       ENDIF 

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  

  END los_and_cd
