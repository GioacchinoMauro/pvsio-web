% ---------------------------------------------------------------
%  Theory: emucharts_Alarm_clock_extension_3_th
%  Author: Paolo Masci
%          Queen Mary University of London, United Kingdom
%          http://www.eecs.qmul.ac.uk/~masci/
% ---------------------------------------------------------------

emucharts_Alarm_clock_extension_3_th: THEORY
 BEGIN


  printf_(x: int): string = IF x < 10 THEN "0" + x ELSE ""+ x ENDIF
  conversion printf_

  %-- machine states
  MachineState: TYPE = { off, on, set_time, set_alarm, alarming }

  %-- emuchart state
  State: TYPE = [#
    current_state: MachineState,
    previous_state: MachineState,
    display_set: string,
    display_hour: string,
    display_minute: string,
    minute: real,
    minute_a: real,
    hour: real,
    display_alarm: string,
    hour_a: real,
    alarming: bool,
    display_alarming: string
  #]

  %-- initial state
  init(x: real): State = (#
    current_state := off,
    previous_state := off,
    display_set := "",
    display_hour := "",
    display_minute := "",
    minute := 0,
    minute_a := 0,
    hour := 12,
    display_alarm := "",
    hour_a := 7,
    alarming := FALSE,
    display_alarming := ""
  #)
  %-- utility functions
  enter_into(ms: MachineState)(st: State): State = st WITH [ current_state := ms ]
  leave_state(ms: MachineState)(st: State): State = st WITH [ previous_state := ms ]

  %-- transition functions
  per_click_screen_on_switch(st: State): bool = ((current_state(st) = off)) OR ((current_state(st) = on)) OR ((current_state(st) = set_alarm)) OR ((current_state(st) = set_time))
  click_screen_on_switch(st: (per_click_screen_on_switch)): State =
    COND
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st),
            new_st = new_st WITH [ display_hour := hour(st) ],
            new_st = new_st WITH [ display_minute := minute(st) ]
         IN enter_into(on)(new_st),
    (current_state(st) = on)
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ display_hour := "" ],
            new_st = new_st WITH [ display_minute := "" ],
            new_st = new_st WITH [ display_alarm := "" ],
            new_st = new_st WITH [ display_set := "" ],
            new_st = new_st WITH [ display_alarming := "" ]
         IN enter_into(off)(new_st),
    (current_state(st) = set_alarm)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ display_hour := "" ],
            new_st = new_st WITH [ display_minute := "" ],
            new_st = new_st WITH [ display_alarm := "" ],
            new_st = new_st WITH [ display_set := "" ]
         IN enter_into(off)(new_st),
    (current_state(st) = set_time)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ display_hour := "" ],
            new_st = new_st WITH [ display_minute := "" ],
            new_st = new_st WITH [ display_alarm := "" ],
            new_st = new_st WITH [ display_set := "" ]
         IN enter_into(off)(new_st)
    ENDCOND

  per_click_mode(st: State): bool = ((current_state(st) = on)) OR ((current_state(st) = set_time)) OR ((current_state(st) = set_alarm)) OR ((current_state(st) = off))
  click_mode(st: (per_click_mode)): State =
    COND
    (current_state(st) = on)
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ display_set := "set time" ]
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_time)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ display_set := "set alarm" ],
            new_st = new_st WITH [ display_hour := ( hour_a(st) ) ],
            new_st = new_st WITH [ display_minute := ( minute_a(st) ) ]
         IN enter_into(set_alarm)(new_st),
    (current_state(st) = set_alarm)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ display_set := "" ],
            new_st = new_st WITH [ display_hour := ( hour(st) ) ],
            new_st = new_st WITH [ display_minute := ( minute(st) ) ]
         IN enter_into(on)(new_st),
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st)
         IN enter_into(off)(new_st)
    ENDCOND

  per_click_hour(st: State): bool = ((current_state(st) = set_time) AND (hour(st) >= 0 AND hour(st) < 23)) OR ((current_state(st) = on)) OR ((current_state(st) = off)) OR ((current_state(st) = set_alarm) AND (hour(st) >= 0 AND hour(st) < 23)) OR ((current_state(st) = set_time) AND (hour(st) = 23)) OR ((current_state(st) = set_alarm) AND (hour_a(st) = 23))
  click_hour(st: (per_click_hour)): State =
    COND
    (current_state(st) = set_time) AND (hour(st) >= 0 AND hour(st) < 23)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ hour := hour(st) + 1 ],
            new_st = new_st WITH [ display_hour := hour(st) + 1 ]
         IN enter_into(set_time)(new_st),
    (current_state(st) = on)
     -> LET new_st = leave_state(on)(st)
         IN enter_into(on)(new_st),
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st)
         IN enter_into(off)(new_st),
    (current_state(st) = set_alarm) AND (hour(st) >= 0 AND hour(st) < 23)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ hour_a := hour_a(st) + 1 ],
            new_st = new_st WITH [ display_hour := hour_a(st) + 1 ]
         IN enter_into(set_alarm)(new_st),
    (current_state(st) = set_time) AND (hour(st) = 23)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ hour := 0 ],
            new_st = new_st WITH [ display_hour := 0 ]
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_alarm) AND (hour_a(st) = 23)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ hour_a := 0 ],
            new_st = new_st WITH [ display_hour := 0 ]
         IN enter_into(set_alarm)(new_st)
    ENDCOND

  per_click_minute(st: State): bool = ((current_state(st) = on)) OR ((current_state(st) = off)) OR ((current_state(st) = set_time) AND (minute(st) = 59)) OR ((current_state(st) = set_alarm) AND (minute_a(st) = 59)) OR ((current_state(st) = set_time) AND (minute(st) >= 0 AND minute(st) < 59)) OR ((current_state(st) = set_alarm) AND (minute_a(st) >= 0 AND minute_a(st) < 59))
  click_minute(st: (per_click_minute)): State =
    COND
    (current_state(st) = on)
     -> LET new_st = leave_state(on)(st)
         IN enter_into(on)(new_st),
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st)
         IN enter_into(off)(new_st),
    (current_state(st) = set_time) AND (minute(st) = 59)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ minute := 0 ],
            new_st = new_st WITH [ display_minute := 0 ]
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_alarm) AND (minute_a(st) = 59)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ minute_a := 0 ],
            new_st = new_st WITH [ display_minute := 0 ]
         IN enter_into(set_alarm)(new_st),
    (current_state(st) = set_time) AND (minute(st) >= 0 AND minute(st) < 59)
     -> LET new_st = leave_state(set_time)(st),
            new_st = new_st WITH [ minute := minute(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute(st) + 1 ]
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_alarm) AND (minute_a(st) >= 0 AND minute_a(st) < 59)
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ minute_a := minute_a(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute_a(st) + 1 ]
         IN enter_into(set_alarm)(new_st)
    ENDCOND

  per_click_alarm_switch(st: State): bool = ((current_state(st) = off)) OR ((current_state(st) = on)) OR ((current_state(st) = set_time)) OR ((current_state(st) = set_alarm) AND (display_alarm(st) = "")) OR ((current_state(st) = set_alarm) AND (display_alarm(st) = "A"))
  click_alarm_switch(st: (per_click_alarm_switch)): State =
    COND
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st)
         IN enter_into(off)(new_st),
    (current_state(st) = on)
     -> LET new_st = leave_state(on)(st)
         IN enter_into(on)(new_st),
    (current_state(st) = set_time)
     -> LET new_st = leave_state(set_time)(st)
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_alarm) AND (display_alarm(st) = "")
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ display_alarm := "A" ]
         IN enter_into(set_alarm)(new_st),
    (current_state(st) = set_alarm) AND (display_alarm(st) = "A")
     -> LET new_st = leave_state(set_alarm)(st),
            new_st = new_st WITH [ display_alarm := "" ]
         IN enter_into(set_alarm)(new_st)
    ENDCOND

  per_tick(st: State): bool = ((current_state(st) = on) AND (hour(st) < 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = on) AND (hour(st) < 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = on) AND (hour(st) = 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = on) AND (hour(st) = 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = off)) OR ((current_state(st) = set_time)) OR ((current_state(st) = set_alarm)) OR ((current_state(st) = on) AND (hour(st) = hour_a(st) AND minute(st) = minute_a(st) AND display_alarm(st) = "A")) OR ((current_state(st) = alarming) AND (NOT alarming(st))) OR ((current_state(st) = alarming) AND (alarming(st) AND hour(st) = 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = alarming) AND (alarming(st) AND hour(st) = 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = alarming) AND (alarming(st) AND hour(st) < 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))) OR ((current_state(st) = alarming) AND (alarming(st) AND hour(st) < 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) )))
  tick(st: (per_tick)): State =
    COND
    (current_state(st) = on) AND (hour(st) < 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ minute := minute(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute(st) + 1 ]
         IN enter_into(on)(new_st),
    (current_state(st) = on) AND (hour(st) < 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ minute := 0 ],
            new_st = new_st WITH [ display_minute := 0 ],
            new_st = new_st WITH [ hour := hour(st) + 1 ],
            new_st = new_st WITH [ display_hour := hour(st) + 1 ]
         IN enter_into(on)(new_st),
    (current_state(st) = on) AND (hour(st) = 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ hour := 0 ],
            new_st = new_st WITH [ minute := 0 ],
            new_st = new_st WITH [ display_hour := 0 ],
            new_st = new_st WITH [ display_minute := 0 ]
         IN enter_into(on)(new_st),
    (current_state(st) = on) AND (hour(st) = 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ minute := minute(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute(st) + 1 ]
         IN enter_into(on)(new_st),
    (current_state(st) = off)
     -> LET new_st = leave_state(off)(st)
         IN enter_into(off)(new_st),
    (current_state(st) = set_time)
     -> LET new_st = leave_state(set_time)(st)
         IN enter_into(set_time)(new_st),
    (current_state(st) = set_alarm)
     -> LET new_st = leave_state(set_alarm)(st)
         IN enter_into(set_alarm)(new_st),
    (current_state(st) = on) AND (hour(st) = hour_a(st) AND minute(st) = minute_a(st) AND display_alarm(st) = "A")
     -> LET new_st = leave_state(on)(st),
            new_st = new_st WITH [ alarming := true ],
            new_st = new_st WITH [ display_alarming := "alarming" ]
         IN enter_into(alarming)(new_st),
    (current_state(st) = alarming) AND (NOT alarming(st))
     -> LET new_st = leave_state(alarming)(st),
            new_st = new_st WITH [ display_alarming := "" ]
         IN enter_into(on)(new_st),
    (current_state(st) = alarming) AND (alarming(st) AND hour(st) = 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(alarming)(st),
            new_st = new_st WITH [ alarming := FALSE ],
            new_st = new_st WITH [ hour := 0 ],
            new_st = new_st WITH [ minute := 0 ],
            new_st = new_st WITH [ display_hour := 0 ],
            new_st = new_st WITH [ display_minute := 0 ]
         IN enter_into(alarming)(new_st),
    (current_state(st) = alarming) AND (alarming(st) AND hour(st) = 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(alarming)(st),
            new_st = new_st WITH [ alarming := FALSE ],
            new_st = new_st WITH [ minute := minute(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute(st) + 1 ]
         IN enter_into(alarming)(new_st),
    (current_state(st) = alarming) AND (alarming(st) AND hour(st) < 23 AND minute(st) = 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(alarming)(st),
            new_st = new_st WITH [ alarming := FALSE ],
            new_st = new_st WITH [ minute := 0 ],
            new_st = new_st WITH [ display_minute := 0 ],
            new_st = new_st WITH [ hour := hour(st) + 1 ],
            new_st = new_st WITH [ display_hour := hour(st) + 1 ]
         IN enter_into(alarming)(new_st),
    (current_state(st) = alarming) AND (alarming(st) AND hour(st) < 23 AND minute(st) < 59 AND NOT ( hour(st) = hour_a(st) AND minute(st) = minute_a(st) ))
     -> LET new_st = leave_state(alarming)(st),
            new_st = new_st WITH [ alarming := FALSE ],
            new_st = new_st WITH [ minute := minute(st) + 1 ],
            new_st = new_st WITH [ display_minute := minute(st) + 1 ]
         IN enter_into(alarming)(new_st)
    ENDCOND

 END emucharts_Alarm_clock_extension_3_th

% ---------------------------------------------------------------
%  PVS theory generated using PVSio-web PVSPrinter ver 0.1
%  Tool freely available at http://www.pvsioweb.org
% ---------------------------------------------------------------
